<?php
/**
 * Created by PhpStorm.
 * User: gaupoit
 * Date: 9/26/18
 * Time: 19:40
 */

class PdaCustomServer extends Wpup_UpdateServer {

	protected $config;

	public function __construct( $serverUrl = null, $serverDirectory = null ) {
		parent::__construct( $serverUrl, $serverDirectory );
		$this->config = require( __DIR__ . '/../../config/index.php' );
	}

	/**
	 * Override metedata.
	 *
	 * @param array $meta Metadata.
	 * @param Wpup_Request $request Request object.
	 *
	 * @override
	 * @return array|void
	 */
	protected function filterMetadata( $meta, $request ) {
		$meta = parent::filterMetadata( $meta, $request ); // TODO: Change the autogenerated stub.

		return $meta;
	}

	/**
	 * Override action download
	 *
	 * @param Wpup_Request $request Request object.
	 *
	 * @return string
	 */
	protected function actionDownload( Wpup_Request $request ) {
//		$this->exitWithError( 'Downloads are disable', 403 );
		return 'hello';
	}

	/**
	 * Override authorization checking
	 * @override
	 *
	 * @param mixed $request Request object
	 *
	 * @return bool.
	 */
	protected function checkAuthorization( $request ) {
		try {
			$license = $request->headers->get( 'Authorization' );
			if ( $license === $this->config['secret_key'] ) {
				return true;
			}

			$curl = curl_init();
			$data = array(
				'license' => $license,
			);
			curl_setopt_array( $curl, array(
				CURLOPT_URL            => $this->config['api'],
				CURLOPT_RETURNTRANSFER => true,
				CURLOPT_ENCODING       => '',
				CURLOPT_MAXREDIRS      => 10,
				CURLOPT_TIMEOUT        => 30,
				CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
				CURLOPT_CUSTOMREQUEST  => 'POST',
				CURLOPT_POSTFIELDS     => json_encode( $data ),
				CURLOPT_HTTPHEADER     => array(
					'Content-Type: application/json',
					'X-API-KEY: ' . $this->config['key'],
				),
			) );
			$response    = curl_exec( $curl );
			$err         = curl_error( $curl );
			$http_status = curl_getinfo( $curl, CURLINFO_HTTP_CODE );
			curl_close( $curl );
			if ( $err ) {
				return false;
			} else {
				return $http_status === 200;
			}
		} catch ( Exception $ex ) {
			return false;
		}
	}

	/**
	 * @param null $query
	 * @param null $headers
	 *
	 * @override
	 * @return array
	 *
	 */
	public function handleRequest( $query = null, $headers = null ) {
		$this->startTime = microtime( true );

		$request = $this->initRequest( $query, $headers );

		$is_authorized = $this->checkAuthorization( $request );

		if ( ! $is_authorized ) {
			return array(
				'statusCode' => 401,
				'body'       => '',
			);
		}
		$body = $this->dispatch( $request );
		if ( empty( $body ) ) {
			return array(
				'statusCode' => 404,
				'body'       => '',
			);
		}

		return array(
			'statusCode' => 200,
			'body'       => $body,
		);
	}

	/**
	 * @override
	 *
	 * @param Wpup_Request $request
	 */
	protected function loadPackageFor( $request ) {
		if ( empty( $request->slug ) ) {
			return;
		}

		try {
			$request->package = $this->findPackage( $request->slug );
		} catch ( Wpup_InvalidPackageException $ex ) {
			$this->exitWithError( sprintf(
				'Package "%s" exists, but it is not a valid plugin or theme. ' .
				'Make sure it has the right format (Zip) and directory structure.',
				htmlentities( $request->slug )
			) );
		}
	}

	/**
	 * Run the requested action.
	 * @override
	 *
	 * @param Wpup_Request $request
	 *
	 * @return bool
	 */
	protected function dispatch( $request ) {
		if ( $request->action === 'get_metadata' ) {
			return $this->actionGetMetadata( $request );
		} else if ( $request->action === 'download' ) {
			return $this->actionDownload( $request );
		} else {
			$this->exitWithError( sprintf( 'Invalid action "%s".', htmlentities( $request->action ) ), 400 );

			return false;
		}
	}

	/**
	 * Get metadata from s3
	 *
	 * @param string $slug Slug.
	 *
	 * @return array|object Response.
	 */
	private function getMetaDataFromS3( $slug ) {
		$curl = curl_init();

		curl_setopt_array( $curl, array(
			CURLOPT_URL            => $this->config['metadata_url'] . '/' . $slug . '/meta_data.json',
			CURLOPT_RETURNTRANSFER => true,
			CURLOPT_ENCODING       => "",
			CURLOPT_MAXREDIRS      => 10,
			CURLOPT_TIMEOUT        => 30,
			CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
			CURLOPT_CUSTOMREQUEST  => "GET",
			CURLOPT_HTTPHEADER     => array(
				"cache-control: no-cache"
			),
		) );

		$response = curl_exec( $curl );
		$err      = curl_error( $curl );

		curl_close( $curl );

		if ( $err ) {
			return false;
		} else {
			return $response;
		}
	}

	/**
	 * Retrieve package metadata as JSON. This is the primary function of the custom update API.
	 * @override
	 *
	 * @param Wpup_Request $request
	 *
	 * @return object|bool
	 */
	protected function actionGetMetadata( Wpup_Request $request ) {
		$meta_data = json_decode( $this->getMetaDataFromS3( $request->slug ) );
		if ( empty( $meta_data ) ) {
			return false;
		}
		$meta_data_array                 = (array) $meta_data;
		$meta_data_array['download_url'] = $this->config['download_url'] . $request->slug;

		return json_encode( (object) $meta_data_array );
	}

	/**
	 * Output something as JSON.
	 * @override
	 *
	 * @param mixed $response
	 *
	 * @return object
	 */
	protected function outputAsJson( $response ) {
		if ( defined( 'JSON_PRETTY_PRINT' ) ) {
			$output = json_encode( $response, JSON_PRETTY_PRINT );
		} elseif ( function_exists( 'wsh_pretty_json' ) ) {
			$output = wsh_pretty_json( json_encode( $response ) );
		} else {
			$output = json_encode( $response );
		}

		return $output;
	}

	/**
	 * Stop script execution with an error message.
	 * @override
	 *
	 * @param string $message Error message.
	 * @param int $httpStatus Optional HTTP status code. Defaults to 500 (Internal Server Error).
	 */
	protected function exitWithError( $message = '', $httpStatus = 500 ) {
		$statusMessages = array(
			// This is not a full list of HTTP status messages. We only need the errors.
			// [Client Error 4xx]
			400 => '400 Bad Request',
			401 => '401 Unauthorized',
			402 => '402 Payment Required',
			403 => '403 Forbidden',
			404 => '404 Not Found',
			405 => '405 Method Not Allowed',
			406 => '406 Not Acceptable',
			407 => '407 Proxy Authentication Required',
			408 => '408 Request Timeout',
			409 => '409 Conflict',
			410 => '410 Gone',
			411 => '411 Length Required',
			412 => '412 Precondition Failed',
			413 => '413 Request Entity Too Large',
			414 => '414 Request-URI Too Long',
			415 => '415 Unsupported Media Type',
			416 => '416 Requested Range Not Satisfiable',
			417 => '417 Expectation Failed',
			// [Server Error 5xx]
			500 => '500 Internal Server Error',
			501 => '501 Not Implemented',
			502 => '502 Bad Gateway',
			503 => '503 Service Unavailable',
			504 => '504 Gateway Timeout',
			505 => '505 HTTP Version Not Supported'
		);

		if ( ! isset( $_SERVER['SERVER_PROTOCOL'] ) || $_SERVER['SERVER_PROTOCOL'] === '' ) {
			$protocol = 'HTTP/1.1';
		} else {
			$protocol = $_SERVER['SERVER_PROTOCOL'];
		}

		print_r( $message );
	}
}
